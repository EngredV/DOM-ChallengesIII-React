{"version":3,"sources":["Components/TableCell.jsx","Components/TableRow.jsx","Components/Table.jsx","App.js","reportWebVitals.js","index.js"],"names":["TableCell","cellColor","handleClick","onClick","TableRow","columns","tableColumns","i","push","Table","rows","tableRows","className","App","props","addRow","setState","state","addColumn","removeRow","alert","removeColumn","selectedColor","event","target","value","fillAllCells","allCells","document","getElementsByTagName","length","style","backgroundColor","fillAllUncoloredCells","clearAllCells","this","onChange","id","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.371075df.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst TableCell = ({ cellColor, handleClick }) => {\n    return (\n        <td onClick={handleClick}>\n            \n        </td>\n    )\n}\n\nexport default TableCell;\n\n\n","import React, { Component } from 'react';\nimport TableCell from \"./TableCell\";\n\nconst TableRow = ({ cellColor, columns, handleClick }) => {\n    let tableColumns = [];\n\n    for (let i = 0; i < columns; i++) {\n        tableColumns.push(\n            <TableCell \n                key={i}\n                cellColor={cellColor}\n                handleClick={handleClick}\n            />\n        )\n    }\n\n    return (\n        <tr>\n            {tableColumns}\n        </tr>\n    )\n}\n\nexport default TableRow;\n\n\n\n","import React, { Component } from 'react';\nimport TableRow from \"./TableRow\";\n\nconst Table = ({ cellColor, rows, columns, handleClick }) => {\n    let tableRows = [];\n\n    for (let i = 0; i < rows; i++) {\n        tableRows.push(\n            <TableRow \n                key={i}\n                cellColor={cellColor}\n                columns={columns}\n                handleClick={handleClick}\n            />\n        )\n    }\n\n    return (\n        <table className=\"Table\">\n            <tbody>\n                {tableRows}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Table;\n\n","import React, { Component } from 'react';\nimport { Table } from \"./Components\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cellColor: \"\",\n      rows: 1,\n      columns: 1,\n      fillAllCells: \"\",\n      fillAllUncoloredCells: \"\",\n      clearAllCells: \"\",\n    }\n  }\n\n  addRow = () => {\n    this.setState({ rows: this.state.rows + 1 });\n  }\n\n  addColumn = () => {\n    this.setState({ columns: this.state.columns + 1 });\n  }\n\n  removeRow = () => {\n    if (this.state.rows < 1) { \n      return alert(\"Error: there are now rows to delete.\");\n    }\n    else {\n      this.setState({ rows: this.state.rows - 1 });\n    }\n  }\n\n  removeColumn = () => {\n    if (this.state.columns < 1) {\n      return alert(\"Error: there are no columns to delete.\");\n    }\n    else {\n      this.setState({ columns: this.state.columns - 1 });\n    }\n  }\n\n  selectedColor = (event) => {\n    this.setState({\n      cellColor: event.target.value\n    })\n  }\n\n  fillAllCells = (event) => {\n    let allCells = document.getElementsByTagName(\"td\");\n    for (let i = 0; i < allCells.length; i++){\n      allCells[i].style.backgroundColor = this.state.cellColor;\n    }\n  };\n\n  fillAllUncoloredCells = (event) => {\n    let allCells = document.getElementsByTagName(\"td\");\n    for (let i = 0; i < allCells.length; i++){\n      if(allCells[i].style.backgroundColor === \"\"){\n        allCells[i].style.backgroundColor = this.state.cellColor;\n      }\n    }\n  };\n\n  clearAllCells = (event) => {\n    let allCells = document.getElementsByTagName(\"td\");\n    for (let i = 0; i < allCells.length; i++){\n      allCells[i].style.backgroundColor = \"\";\n    }\n  };\n\n  handleClick = (event) => {\n    event.target.style.backgroundColor = this.state.cellColor;\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"butns\">\n          <button className=\"btns\" onClick={() => this.addRow(this.state)}>Add Row</button>\n          <button className=\"btns\" onClick={() => this.addColumn(this.state)}>Add Column</button>\n          <button className=\"btns\" onClick={() => this.removeRow(this.state)}>Delete Row</button>\n          <button className=\"btns\" onClick={() => this.removeColumn(this.state)}>Delete Column</button> \n          <button className=\"btns\" onClick={() => this.fillAllCells(this.state)}>Fill all cells</button>\n          <button className=\"btns\" onClick={() => this.fillAllUncoloredCells(this.state)}>Fill all uncolored cells</button>\n          <button className=\"btns\" onClick={() => this.clearAllCells(this.state)}>Clear all cells</button>     \n        </div>\n        <div className=\"dropdown\">\n          <select value={this.state.cellColor} onChange={this.selectedColor}>\n            <option value=\"\">--Select A Color--</option>\n            <option className=\"black\" id=\"black\" value=\"black\">Black</option>\n            <option className=\"red\" id=\"red\" value=\"red\">Red</option>\n            <option className=\"deepPink\" id=\"deepPink\" value=\"deepPink\">Deep Pink</option>\n            <option className=\"pink\" id=\"pink\" value=\"pink\">Pink</option>\n            <option className=\"purple\" id=\"purple\" value=\"purple\">Purple</option>\n            <option className=\"blue\" id=\"blue\" value=\"blue\">Blue</option>\n            <option className=\"lightBlue\" id=\"lightBlue\" value=\"lightBlue\">Light Blue</option>\n            <option className=\"green\" id=\"green\" value=\"green\">Green</option>\n            <option className=\"lightGreen\" id=\"lightGreen\" value=\"lightGreen\">Light Green</option>\n            <option className=\"orange\" id=\"orange\" value=\"orange\">Orange</option>\n            <option className=\"yellow\" id=\"yellow\" value=\"yellow\">Yellow</option> \n          </select>\n        </div>\n        <div className=\"Table\">\n          <Table\n            rows={this.state.rows}\n            columns={this.state.columns}\n            cellColor={this.state.cellColor}\n            handleClick={this.handleClick}\n          />\n        </div>\n        \n      </>\n    )\n  }\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}